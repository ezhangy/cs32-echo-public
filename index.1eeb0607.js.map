{"mappings":"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","sources":["src/components/creators/ParagraphEltCreator.js","src/components/HTMLConverter.js","src/components/creators/ResultCreator.js","src/mockedJson.js","src/components/csv/CSVCreators.js","src/main.js","src/components/commands/Mode.js","src/components/commands/Load.js","src/components/commands/View.js","src/components/commands/Search.js"],"sourcesContent":["export class ParagraphEltCreator {\n    makeInnerHTML(javascriptObj) {\n        return `<p>${javascriptObj}</p>`;\n    }\n}\n","export class HTMLConverter {\n    constructor(codeObj, creator) {\n        this.codeObj = codeObj;\n        this.creator = creator;\n    }\n    toHTMLTemplate() {\n        const template = document.createElement(\"template\");\n        template.innerHTML = this.creator.makeInnerHTML(this.codeObj);\n        return template;\n    }\n}\n","import { HTMLConverter } from \"../HTMLConverter.js\";\nimport { globalClassNames } from \"../../main.js\";\nexport class ResultCreator {\n    makeInnerHTML(javascriptObj) {\n        const { command, outputCreator, output, isResultVerbose } = javascriptObj;\n        const outputHTML = new HTMLConverter(output, outputCreator)\n            .toHTMLTemplate()\n            .innerHTML;\n        return isResultVerbose\n            ? `<div>\n          <p class=\"${globalClassNames.COMMANDTEXT}\">\n            Command: ${command}\n          </p>\n          <div class=\"${globalClassNames.COMMANDOUTPUT}\">\n            <span class=\"${globalClassNames.COMMANDOUTPUTLABEL}\">Output:</span>${outputHTML}\n         </div>\n        </div>`\n            : `<div class=\"${globalClassNames.COMMANDOUTPUT}\">${outputHTML}</div>`;\n    }\n}\n","const emptyCSV = [];\nconst stringCSV = [\n    [\"tim\", \"nelson\", \"instructor\"],\n    [\"john\", \"doe\", \"student\"],\n    [\"jane\", \"doe\", \"student\"],\n];\nconst numberCSV = [\n    [0, 1, 2],\n    [2, 3, 4],\n    [5, 3, 4],\n];\nconst mockLoadMap = {\n    [\"emptyCSV.csv\"]: emptyCSV,\n    [\"stringCSV.csv\"]: stringCSV,\n    [\"numberCSV.csv\"]: numberCSV,\n};\nconst stringCSVSearchMap = {\n    [JSON.stringify([\"0\", \"tim\"])]: [stringCSV[0]],\n    [JSON.stringify([\"1\", \"nelson\"])]: [stringCSV[0]],\n    [JSON.stringify([\"2\", \"instructor\"])]: [stringCSV[0]],\n    [JSON.stringify([\"0\", \"john\"])]: [stringCSV[1]],\n    [JSON.stringify([\"0\", \"jane\"])]: [stringCSV[2]],\n    [JSON.stringify([\"1\", \"doe\"])]: [stringCSV[1], stringCSV[2]],\n    [JSON.stringify([\"2\", \"student\"])]: [stringCSV[1], stringCSV[2]],\n};\nconst numberCSVSearchMap = {\n    [JSON.stringify([\"0\", \"0\"])]: [numberCSV[0]],\n    [JSON.stringify([\"1\", \"1\"])]: [numberCSV[0]],\n    [JSON.stringify([\"0\", \"2\"])]: [numberCSV[1]],\n    [JSON.stringify([\"2\", \"2\"])]: [numberCSV[0]],\n    [JSON.stringify([\"1\", \"3\"])]: [numberCSV[1], numberCSV[2]],\n    [JSON.stringify([\"2\", \"4\"])]: [numberCSV[1], numberCSV[2]],\n    [JSON.stringify([\"0\", \"5\"])]: [numberCSV[2]],\n};\n// Provide this to other modules (e.g., for testing!)\n// The configuration in this project will require /something/ to be exported.\nexport { mockLoadMap, stringCSVSearchMap, numberCSVSearchMap };\n","export class CSVRowCreator {\n    makeCellHTML(cell) {\n        let cellStr = typeof cell === \"number\"\n            ? cell.toString()\n            : cell;\n        return `<td>${cellStr}</td>`;\n    }\n    makeInnerHTML(javascriptObj) {\n        return `<tr>${javascriptObj\n            .map((cell) => this.makeCellHTML(cell))\n            .join(\"\\n\")}</tr>`;\n    }\n}\nexport class TableCreator {\n    makeInnerHTML(javascriptObj) {\n        return `<table>${javascriptObj\n            .map((row) => (new CSVRowCreator().makeInnerHTML(row)))\n            .join(\"\\n\")}</table>`;\n    }\n}\n","import { ParagraphEltCreator } from \"./components/creators/ParagraphEltCreator.js\";\nimport { ResultCreator } from \"./components/creators/ResultCreator.js\";\nimport { Load, Mode, Search, View, } from \"./components/commands/allcommands.js\";\nimport { HTMLConverter } from \"./components/HTMLConverter.js\";\nimport { mockLoadMap } from \"./mockedJson.js\";\n// The window.onload callback is invoked when the window is first loaded by the browser\nwindow.onload = () => {\n    prepareMouseClick();\n    // If you're adding an event for a button click, do something similar.\n    // The event name in that case is \"click\", not \"keypress\", and the type of the element\n    // should be HTMLButtonElement. The handler function for a \"click\" takes no arguments.\n};\n// global class names\nconst globalClassNames = {\n    COMMANDLOG: \"command-log\",\n    ARROWSPAN: \"console-arrow\",\n    COMMANDOUTPUT: \"command-output\",\n    COMMANDOUTPUTLABEL: \"command-output-label\",\n    COMMANDTEXTLABEL: \"command-output-label\",\n    COMMANDTEXT: \"command-text\",\n    BRIEFLOG: \"brief-log\",\n    VERBOSELOG: \"verbose-log\",\n};\nlet loadedCSV;\nlet history = [];\nconst defaultCommandMap = {\n    mode: new Mode(),\n    load_file: new Load(),\n    view: new View(),\n    search: new Search(),\n};\nlet isModeVerbose = false;\nfunction getIsModeVerbose() {\n    return isModeVerbose;\n}\nfunction setVerbosity(newIsModeVerbose) {\n    isModeVerbose = newIsModeVerbose;\n}\nfunction setLoadedCSV(csvToLoad) {\n    loadedCSV = csvToLoad;\n}\nfunction prepareMouseClick() {\n    const maybeInputs = document.getElementsByClassName(\"repl-button\");\n    const maybeInput = maybeInputs.item(0);\n    if (maybeInput == null) {\n        console.log(\"Couldn't find input element\");\n    }\n    else if (!(maybeInput instanceof HTMLButtonElement)) {\n        console.log(`Found element ${maybeInput}, but it wasn't an input`);\n    }\n    else {\n        // Notice that we're passing *THE FUNCTION* as a value, not calling it.\n        // The browser will invoke the function when a key is pressed with the input in focus.\n        //  (This should remind you of the strategy pattern things we've done in Java.)\n        maybeInput.addEventListener(\"click\", () => updateHistoryAndRender(defaultCommandMap));\n    }\n}\n// We'll use a global state reference for now\nlet pressCount = 0;\nfunction getPressCount() {\n    return pressCount;\n}\nlet clickCount = 0;\nfunction getMouseClickCount() {\n    return clickCount;\n}\nfunction handleKeypress(event) {\n    // The event has more fields than just the key pressed (e.g., Alt, Ctrl, etc.)\n    pressCount = pressCount + 1;\n    console.log(`key pressed: ${event.key}. ${getPressCount()} presses seen so far.`);\n}\nfunction parseArgs(inputStr) {\n    const regex = /(?:[^\\s\"]+|\"[^\"]*\")+/g;\n    const regexMatches = inputStr.match(regex);\n    const args = regexMatches != null\n        ? stripWrapQuotes(regexMatches.filter((n) => n != null || n === \" \"))\n        : [];\n    return args;\n}\nfunction stripWrapQuotes(rawArgs) {\n    return rawArgs.map((arg) => {\n        const endIndex = arg.length - 1;\n        const hasWrapQuotes = ((arg[0] === '\"' && arg[endIndex] === '\"'));\n        return hasWrapQuotes ? arg.substring(1, endIndex) : arg;\n    });\n}\nfunction pushHistoryElt(commandMap, inputStr) {\n    const args = parseArgs(inputStr);\n    if (args.length === 0) {\n        history.push({\n            command: inputStr,\n            output: \"submitted empty string\",\n            outputCreator: new ParagraphEltCreator(),\n            isResultVerbose: isModeVerbose,\n        });\n    }\n    else if (args[0] in commandMap) {\n        const command = commandMap[args[0]];\n        history.push(command.run(args, inputStr));\n    }\n    else {\n        history.push({\n            command: inputStr,\n            output: `command ${args[0]} not found`,\n            outputCreator: new ParagraphEltCreator(),\n            isResultVerbose: isModeVerbose\n        });\n    }\n}\nfunction updateCommandHistoryState(commandMap) {\n    const maybeInputs = document.getElementsByClassName(\"repl-command-box\");\n    // Assumption: there's only one thing\n    const maybeInput = maybeInputs.item(0);\n    // Is the thing there? Is it of the expected type?\n    //  (Remember that the HTML author is free to assign the repl-input class to anything :-) )\n    if (maybeInput == null) {\n        console.log(\"Couldn't find input element\");\n    }\n    else if (!(maybeInput instanceof HTMLInputElement)) {\n        console.log(`Found element ${maybeInput}, but it wasn't an input`);\n    }\n    else {\n        // Notice that we're passing *THE FUNCTION* as a value, not calling it.\n        // The browser will invoke the function when a key is pressed with the input in focus.\n        //  (This should remind you of the strategy pattern things we've done in Java.)\n        const commandInput = maybeInput;\n        pushHistoryElt(commandMap, commandInput.value);\n        commandInput.value = \"\";\n    }\n}\nfunction updateHistoryAndRender(commandMap) {\n    updateCommandHistoryState(commandMap);\n    renderCommandHistory();\n}\nfunction makeResultDiv(result) {\n    const resultTemplate = document.createElement(\"template\");\n    const resultHTML = new HTMLConverter(result, new ResultCreator()).toHTMLTemplate().innerHTML;\n    const outputClassName = `${globalClassNames.COMMANDLOG} ${result.isResultVerbose\n        ? globalClassNames.VERBOSELOG\n        : globalClassNames.BRIEFLOG}`;\n    resultTemplate.innerHTML = `\n    <output class=\"${outputClassName}\"/>\n      <span class=${globalClassNames.ARROWSPAN}>></span> ${resultHTML}\n    <output />`;\n    return resultTemplate.content;\n}\nfunction makeResultDivList(history) {\n    return history.map((result) => makeResultDiv(result));\n}\nfunction renderCommandHistory() {\n    const maybeHistoryDivs = document.getElementsByClassName(\"repl-history\");\n    const maybeHistoryDiv = maybeHistoryDivs.item(0);\n    if (maybeHistoryDiv == null) {\n        console.log(`Couldn't find div with class \"repl-history\"`);\n    }\n    else if (!(maybeHistoryDiv instanceof HTMLDivElement)) {\n        console.log(`Found element ${maybeHistoryDiv}, but it wasn't a div`);\n    }\n    else {\n        // TODO: make historyDiv global\n        const historyDiv = maybeHistoryDiv;\n        historyDiv.replaceChildren(...makeResultDivList(history).reverse());\n    }\n}\nfunction clearHistory() {\n    history = [];\n}\nfunction getHistory() {\n    //defensive copy\n    return history.slice();\n}\nfunction resetMode() {\n    isModeVerbose = false;\n}\nfunction resetLoadedCSV() {\n    loadedCSV = null;\n}\n// Provide this to other modules (e.g., for testing!)\n// The configuration in this project will require /something/ to be exported.\nexport { handleKeypress, resetMode, getIsModeVerbose, getPressCount, loadedCSV, setVerbosity, setLoadedCSV, clearHistory, getHistory, pushHistoryElt, updateCommandHistoryState, renderCommandHistory, defaultCommandMap, updateHistoryAndRender, globalClassNames, parseArgs, resetLoadedCSV, mockLoadMap };\n","import { setVerbosity, getIsModeVerbose } from \"../../main.js\";\nimport { ParagraphEltCreator } from \"../creators/ParagraphEltCreator.js\";\nexport class Mode {\n    run(args, commandText) {\n        setVerbosity(!getIsModeVerbose());\n        let output = `mode changed to ${getIsModeVerbose() ? \"verbose\" : \"brief\"}`;\n        return {\n            command: commandText,\n            outputCreator: new ParagraphEltCreator(),\n            output: output,\n            isResultVerbose: getIsModeVerbose()\n        };\n    }\n}\n","import { getIsModeVerbose, setLoadedCSV } from \"../../main.js\";\nimport { mockLoadMap } from \"../../mockedJson.js\";\nimport { ParagraphEltCreator } from \"../creators/ParagraphEltCreator.js\";\nexport class Load {\n    loadHelper(filePath) {\n        if (filePath in mockLoadMap) {\n            setLoadedCSV(mockLoadMap[filePath]);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    run(args, commandText) {\n        let output = `Exception: load_file expected 1 argument but found ${args.length - 1}.`;\n        if (args.length == 2) {\n            if (this.loadHelper(args[1])) {\n                output = `Successfully loaded ${args[1]}.`;\n            }\n            else {\n                output = `Could not find ${args[1]}.`;\n            }\n        }\n        return {\n            command: commandText,\n            outputCreator: new ParagraphEltCreator(),\n            output: output,\n            isResultVerbose: getIsModeVerbose()\n        };\n    }\n}\n","import { loadedCSV, getIsModeVerbose } from \"../../main.js\";\nimport { TableCreator } from \"../csv/CSVCreators.js\";\nimport { ParagraphEltCreator } from \"../creators/ParagraphEltCreator.js\";\nexport class View {\n    viewHelper() {\n        if (loadedCSV == undefined || loadedCSV == null) {\n            return null;\n        }\n        else {\n            return loadedCSV;\n        }\n    }\n    run(args, commandText) {\n        let toReturn;\n        if (args.length == 1) {\n            if (loadedCSV != null && this.viewHelper() != null) {\n                toReturn = loadedCSV;\n            }\n            else {\n                toReturn = `No CSV file loaded.`;\n            }\n        }\n        else {\n            toReturn = `Exception: view expected 0 arguments but found ${args.length - 1}.`;\n        }\n        return {\n            command: commandText,\n            outputCreator: typeof toReturn === \"string\"\n                ? new ParagraphEltCreator()\n                : new TableCreator(),\n            output: toReturn,\n            isResultVerbose: getIsModeVerbose(),\n        };\n    }\n}\n","import { getIsModeVerbose, loadedCSV, mockLoadMap } from \"../../main.js\";\nimport { numberCSVSearchMap, stringCSVSearchMap } from \"../../mockedJson.js\";\nimport { TableCreator } from \"../csv/CSVCreators.js\";\nimport { ParagraphEltCreator } from \"../creators/ParagraphEltCreator.js\";\nexport class Search {\n    searchHelper(column, searchTerm) {\n        const stringTerm = JSON.stringify([column, searchTerm]);\n        if (loadedCSV === null) {\n            return null;\n        }\n        else if (loadedCSV === mockLoadMap[\"numberCSV.csv\"]) {\n            return stringTerm in numberCSVSearchMap\n                ? numberCSVSearchMap[stringTerm]\n                : [];\n        }\n        else if (loadedCSV === mockLoadMap[\"stringCSV.csv\"]) {\n            return stringTerm in stringCSVSearchMap\n                ? stringCSVSearchMap[stringTerm]\n                : [];\n        }\n        else if (loadedCSV.length === 0) {\n            return [];\n        }\n        else {\n            return null;\n        }\n    }\n    run(args, commandText) {\n        let toReturn;\n        if (args.length == 3) {\n            const searchResult = this.searchHelper(args[1], args[2]);\n            if (searchResult == null) {\n                toReturn = `No CSV file loaded.`;\n            }\n            else if (searchResult.length === 0) {\n                toReturn = `No search results found.`;\n            }\n            else {\n                toReturn = searchResult;\n            }\n        }\n        else {\n            toReturn = `Exception: search expected 2 arguments but found ${args.length - 1}.`;\n        }\n        return {\n            command: commandText,\n            outputCreator: typeof toReturn === \"string\"\n                ? new ParagraphEltCreator()\n                : new TableCreator(),\n            output: toReturn,\n            isResultVerbose: getIsModeVerbose(),\n        };\n    }\n}\n"],"names":["$5b43d9ddb81c7194$export$2aff89cd05f52157","makeInnerHTML","javascriptObj","$1f684d683c00f9af$export$f5a9a65d2e15c4e8","toHTMLTemplate","template","document","createElement","innerHTML","this","creator","codeObj","constructor","$21d9e666a81983d9$export$30804696d6eca4f3","command","outputCreator","output","isResultVerbose","outputHTML","$7c0049576ebe11f2$export$779f425558a43dd7","COMMANDTEXT","COMMANDOUTPUT","COMMANDOUTPUTLABEL","$fc0e1ba62682b1ce$var$stringCSV","$fc0e1ba62682b1ce$var$numberCSV","$fc0e1ba62682b1ce$export$f5a2bb776b27303b","$fc0e1ba62682b1ce$export$c2e9d8949b749aa2","JSON","stringify","$fc0e1ba62682b1ce$export$87dcfd807ec7701a","$549c2385488a6703$export$673557b37520d7dc","makeCellHTML","cell","toString","map","join","$549c2385488a6703$export$3ec714a5d1075acd","row","window","onload","maybeInput","getElementsByClassName","item","console","log","HTMLButtonElement","addEventListener","commandMap","HTMLInputElement","commandInput","inputStr","args","regex","regexMatches","match","filter","n","arg","endIndex","length","substring","$7c0049576ebe11f2$export$7300a92932ee17a3","$7c0049576ebe11f2$var$history","push","$7c0049576ebe11f2$var$isModeVerbose","run","$7c0049576ebe11f2$export$37172017dea63481","value","$7c0049576ebe11f2$export$3ba586e04ef269bc","$7c0049576ebe11f2$export$924ed447de4a3d0b","maybeHistoryDiv","history","HTMLDivElement","replaceChildren","result","resultTemplate","resultHTML","outputClassName","COMMANDLOG","VERBOSELOG","BRIEFLOG","ARROWSPAN","content","$7c0049576ebe11f2$var$makeResultDiv","reverse","$7c0049576ebe11f2$export$fea9a36a0356682f","$7c0049576ebe11f2$var$prepareMouseClick","COMMANDTEXTLABEL","$7c0049576ebe11f2$export$2e4dd4baf94d6210","mode","commandText","newIsModeVerbose","$7c0049576ebe11f2$export$1afdf0990a3bc820","load_file","loadHelper","filePath","view","viewHelper","undefined","toReturn","search","searchHelper","column","searchTerm","stringTerm","searchResult"],"version":3,"file":"index.1eeb0607.js.map"}